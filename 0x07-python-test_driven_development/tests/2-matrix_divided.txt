The ``2-matrix_divided`` module
======================

Using ``matrix_divided``
-------------------

This is a text file in reStructuredText format.  First import
``matrix_divided`` from the ``2-matrix_divided`` module:
    caso 00 Open the file
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Now use it:

    case 01 passing a tuple
    >>> matrix_divided(([1, 2, 3], [3, 5, 6]), 89)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    case 02 passing a row with tuple
    >>> matrix_divided([(1, 2, 3), [3, 5, 6]], 89)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    case 03 an element is different than int or float
    >>> matrix_divided([[1, 2, "Holberton"], [3, 'a', 6]], 89)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    case 04 Passing rows with different length
    >>> matrix_divided([[0, 3, 4], [34, 56]], 2)
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

    case 05 Passing div different to int and float
    >>> matrix_divided([[23, 34, 56], [12, 56, 98]], None)
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

    case 06 div equal 0
    >>> matrix_divided([[23, 34, 56], [12, 56, 98]], 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

    case 07 normal case
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

    case 08 empty matrix
    >>> matrix_divided([[]], 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    case 09 matrix = [[], []]
    >>> matrix_divided([[], []], 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    case 10 passing div is float
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2.5)
    [[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

    case 11 passing negative div
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], -2.5)
    [[-0.4, -0.8, -1.2], [-1.6, -2.0, -2.4]]

    case 12 empty function
    >>> matrix_divided()
    Traceback (most recent call last):
         ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

    case 13 only one argument
    >>> matrix_divided([[1,2, 3], [4, 6, 7]])
    Traceback (most recent call last):
         ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

    case 14 Passing more than two arguments
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2, 3)
    Traceback (most recent call last):
         ...
    TypeError: matrix_divided() takes 2 positional arguments but 3 were given

    case 15 Passing div equal 0.0
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0.0)
    Traceback (most recent call last):
         ...
    ZeroDivisionError: division by zero

    Case 16
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], float(inf))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
