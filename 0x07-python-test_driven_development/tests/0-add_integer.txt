The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

This is a text file in reStructuredText format.  First import
``add_integer`` from the ``0-add_integer`` module:
    caso 00 Open the file
    >>> add_integer = __import__('0-add_integer').add_integer

Now use it:

    Case 01 Add two int
    >>> add_integer(2, 3)
    5

    Case 02 Add float and int return int
    >>> type(add_integer(2.5, 3))
    <class 'int'>

    Case 03 Add two int one positive and other negative
    >>> add_integer(-3, 3)
    0

    case 04 Add two float return a number
    >>> add_integer(3.4, 2.5)
    5

    Case 05 Pass invalid argument to a
    >>> add_integer("Hola", 3)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    case 06 Pass invalid argument to b
    >>> add_integer(3, None)
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    case 07 Pass a only one argument
    >>> add_integer(2)
    100

    case 08 Pass without arguments
    >>> add_integer()
    Traceback (most recent call last):
        ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

    case 09 Pass more than two arguments
    >>> add_integer(2, 3, 4)
    Traceback (most recent call last):
        ...
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

